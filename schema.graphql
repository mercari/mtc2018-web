# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!

  """
  セッション一覧を取得します。
  """
  sessionList(
    first: Int
    after: String
    req: SessionListInput
  ): SessionConnection!

  """
  セッションを取得します。
  """
  session(sessionId: Int!): Session

  """
  展示一覧を取得します。
  """
  exhibisionList(
    first: Int
    after: String
    req: ExhibitionListInput
  ): ExhibitionConnection!

  """
  お知らせ一覧を取得します
  """
  newsList(first: Int, after: String): NewsConnection!
}

type Mutation {
  """
  セッションに対していいね！することができます。
  ログイン周りのシステムはないので、リクエストにUUIDを付与してください。
  """
  createLike(input: CreateLikeInput!): CreateLikePayload
}

type Subscription {
  """
  セッションに対するいいね！をイベントとして取得します。
  一定期間中にいいね！された数を返します。
  """
  likeAdded(sessionId: Int!): LikeEvent!
}

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type SessionConnection {
  pageInfo: PageInfo!
  edges: [SessionEdge!]!
  nodes: [Session!]!
}

type SessionEdge {
  cursor: String
  node: Session!
}

input SessionListInput {
  tmp: String
}

"""
セッション1つに関する情報。
"""
type Session implements Node {
  id: ID!
  sessionId: Int!
  type: String!
  place: String!
  title: String!
  titleJa: String!
  startTime: String!
  endTime: String!
  outline: String!
  outlineJa: String!
  lang: String!
  tags: [String!]!
  slides: [Slide!]!
  movies: [Movie!]!

  liked: Int!
  speakers: [Speaker!]!
}

type Slide {
  id: ID!
  slideId: Int!
  lang: String!
  url: String!
  session: Session!
  speaker: Speaker!
}

type Movie {
  id: ID!
  movieId: Int!
  url: String!
  session: Session!
  speaker: Speaker!
}

"""
スピーカー1人に関する情報。
"""
type Speaker implements Node {
  id: ID!
  speakerId: String!
  name: String!
  nameJa: String!
  company: String!
  position: String!
  positionJa: String!
  profile: String!
  profileJa: String!
  iconUrl: String!
  twitterId: String!
  githubId: String!

  sessions: [Session!]
}

type ExhibitionConnection {
  pageInfo: PageInfo!
  edges: [ExhibitionEdge!]!
  nodes: [Exhibition!]!
}

type ExhibitionEdge {
  cursor: String
  node: Exhibition!
}

input ExhibitionListInput {
  tmp: String
}

"""
展示1つに関する情報。
"""
type Exhibition implements Node {
  id: ID!
  exhibitionId: Int!
  place: String!
  title: String!
  titleJa: String!
  description: String!
  descriptionJa: String!
}

"""
セッションに対していいね！する時の引数です。
uuidはいいね！した人のUUIDです。
"""
input CreateLikeInput {
  clientMutationId: String
  """
  いいねした人のUUID。
  適当にブラウザのセッションでユニークなIDをつっこんでください。
  """
  uuid: String!
  """
  いいねするSessionのID。
  """
  sessionId: Int!
}

type CreateLikePayload {
  clientMutationId: String
  like: Like!
}

"""
セッションに対していいね！した情報です。
"""
type Like implements Node {
  id: ID!
  session: Session!
}

type LikeEvent {
  sessionId: Int!
  likes: Int!
}

type NewsConnection {
  pageInfo: PageInfo!
  edges: [NewsEdge!]!
  nodes: [News!]!
}

type NewsEdge {
  cursor: String
  node: News!
}

"""
お知らせです。
"""
type News implements Node {
  id: ID!
  newsId: String!
  date: String!
  message: String!
  messageJa: String!
  link: String
}
